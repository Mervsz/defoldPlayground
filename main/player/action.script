function init(self)
	msg.post(".", "acquire_input_focus")
	-- declarations
	self.dir = vmath.vector3(1,0,0)
	self.speed = 90
	self.decceleration = -200
	self.VMove = false
	self.HJump = false
	self.input = vmath.vector3()
	self.velocity = vmath.vector3()

	self.jump_factor = vmath.vector3(0,0,0)

	print("intialized player")
	
	-- sprite.set_constant("/player#sprite", "tint", vmath.vector4(1, 2, 2, 1))
end

function movement(self, dt, mode)
	local x = nil
	local y =  self.input
	if mode == "start" then
		x = self.speed
	else
		x = self.decceleration
		y = vmath.vector3(1,0,0)
	end
		
	local acceleration = y * x
	local dv = acceleration * dt
	local v0 = self.velocity
	local v1 = self.velocity + dv

	local movement = (v0 + v1) * dt * 0.5
	-- print(movement, "move value")
	self.velocity = v1

	return movement
end


function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local pos = go.get_position()
	local acc = vmath.vector3(0,0,0)
	
	if vmath.length(self.input) > 0  then
		self.input = vmath.normalize(self.input)
	end

	if self.HJump == true then
		self.jump_factor = vmath.vector3(0,10,0)
	else
		self.jump_factor = vmath.vector3(0,0,0)
	end
	
	if self.VMove == true then
	acc = movement(self, dt, "start")
	
	else
		-- print("check velocity", vmath.length(self.velocity))
		if self.velocity.x > 5 or self.velocity.x < -5 then
			-- print("ongoing to stop")
			acc = movement(self, dt, "stopped")
		else
			self.velocity = vmath.vector3()
			
		end
	end
	go.set_position(pos + acc + self.jump_factor)
	self.input = vmath.vector3()
	self.VMove = false
	self.HJump = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("move_right") or message_id == hash("touch_test") then
		self.VMove = true
		self.input.x = 1
	elseif message_id == hash("move_left") or message_id == hash("touch_test") then
		self.VMove = true
		self.input.x = -1
	elseif message_id == hash("player_jump") then
		self.HJump = true
		self.input.y = 1
	-- elseif message_id == hash("player_left") or message_id == hash("gamepad_left") then
	-- 	self.input.x = -2
	end
end

function on_input(self, action_id, action)

	
	if action_id == hash("player_right") or action_id == hash("touch_test") then
		self.VMove = true
	self.input.x = 2
	elseif action_id == hash("player_jump") or action_id == hash("gamepad_left") then
	self.HJump = true
	self.input.y = 1
	end
-- 
-- 	if vmath.length(self.input) > 0 then
-- 		self.isMoving = true
-- 		self.dir = vmath.normalize(self.input)
-- 	end

end

function on_reload(self)
end